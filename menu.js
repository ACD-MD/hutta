const { cmd, commands } = require('../command');
const config = require('../config');
const os = require('os');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, fetchJson , runtime ,sleep } = require('../lib/functions')
const { checkAccess, isPremiumUser, blacklistedJIDs, premiumJIDs, dataLoaded } = require('../lib/accessControl');
const mono = "```"

    function detectPlatform() {
      if (process.env.REPL_ID) return 'Replit';
      if (process.env.HEROKU_APP_NAME) return 'Heroku';
      if (process.env.KOYEB_PROJECT_ID) return 'Koyeb';
      if (process.env.AWS_LAMBDA_FUNCTION_NAME) return 'AWS Lambda';
      if (process.env.VERCEL) return 'Vercel';
      if (process.env.RENDER) return 'Render';
      if (process.env.NETLIFY) return 'Netlify';
      if (process.env.WORKFLOW) return 'Workflow';
      if (process.env.FLYIO_APP_NAME) return 'Fly.io';
      return 'Unknown Platform';
    }
    const platformName = detectPlatform();

    

cmd({
      pattern: "runtime",
      desc: "Chek Bot Runtime",
      category: "main",
      react: "‚è∞",
      filename: __filename
    }, async (conn, mek, m, { from, reply }) => {
      try {
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üöÄ ùñ±ùóéùóáùóçùóÇùóÜùñæ : ${uptime}*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå ',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `Runtime ‚è∞`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://i.ibb.co/LP1dXT2/IMG-20241208-WA0281.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


        




cmd({
      pattern: "alive",
      alias: ["online"],
      desc: "Chek Bot Alive",
      category: "main",
      react: "üßöüèª‚Äç‚ôÄÔ∏è",
      filename: __filename
    },
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try{
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üëãüèª ‡∑Ñ‡∑è‡∂∫‡∑í ${pushname}, I AM DARK SHADOW - MD WA BOT üß¨*

üëæ _ABOUT THE BOT_ 

‚è≥ RAM USAGE -*${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB / ${(os.totalmem() / 1024 / 1024).toFixed(2)}MB
‚è∞ UPTIME -* ${runtime(process.uptime())}
üïπÔ∏è PREFIX -* ${config.PREFIX}

*ACD MD Version 2.0.0*üîó

This is a whatsapp bot that helps us to download our needed things. such as videos , songs , documents , apks etc. Dark Shadow MD is the upgrade version of ACD MD whatsapp bot ( Version 2.0.0 ) . Special Thanks to owners Crazy Chutta / Crazy Dina / Loku ash And Drk Vala üåü

‚òòÔ∏è HAVE A NICE DAY ‚òòÔ∏è

üéØ MORE DETAILS 

| ‚û§ .repo
| ‚û§ .menu
| ‚û§ .speed
| ‚û§ .system
| ‚û§.runtime

> *¬© ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥° - ·¥ç·¥Ö*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `I'm Alive Now üë®‚Äçüíª`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://i.ibb.co/LP1dXT2/IMG-20241208-WA0281.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });

















cmd({
      pattern: "allmenu",
      alias: ["panel"],
      desc: "Get Bot Menu",
      category: "main",
      react: "üìÅ",
      filename: __filename
},
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
try{
    
let menu = {
main: '',
download: '',
anime: '',
group: '',
owner: '',
convert: '',
news: '',
ai: '',
fun: '',
search: '',
fun: '',
voice: '',
other: ''
};

for (let i = 0; i < commands.length; i++) {
if (commands[i].pattern && !commands[i].dontAddCommandList) {
menu[commands[i].category] += `.${commands[i].pattern}\n`;
 }
}
   
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üëãüèª ‡∑Ñ‡∑è‡∂∫‡∑í ${pushname}, I AM DARK SHADOW MD WA BOT ‚ôªÔ∏è*

*Command Panel üí±*

*‚è≥ RAM USAGE -*${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB / ${(os.totalmem() / 1024 / 1024).toFixed(2)}MB
*‚è∞ UPTIME -* ${runtime(process.uptime())}
*üïπÔ∏è PREFIX -* ${config.PREFIX}

LIST OF MENU ‚ùáÔ∏è
*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*
*| ‚û§ 1 || OWNER MENU*
 ${menu.owner}
*| ‚û§ 2 || CONVERT MENU*
 ${menu.convert}
*| ‚û§ 3 || AI MENU*
 ${menu.ai}
*| ‚û§ 4 || DOWNLOAD MENU*
 ${menu.download}
*| ‚û§ 5 || GROUP MENU*
 ${menu.group}
*| ‚û§ 6 || ANIME MENU*
 ${menu.anime}
*| ‚û§ 7 || FUN MENU*
 ${menu.fun}
*| ‚û§ 8 || NEWS MENU*
 ${menu.news}
*| ‚û§ 9 || OTHER MENU*
 ${menu.other}
*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*

_üî¢ Reply The Number That You Want_

> ¬© ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥° - ·¥ç·¥Ö`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `SHADOW-MD Menu List`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://i.ibb.co/LP1dXT2/IMG-20241208-WA0281.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


cmd({
      pattern: "owner",
      desc: "Chek Bot Owner",
      category: "main",
      react: "üë®‚Äçüíª",
      filename: __filename
    },
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try{
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üëã Hello ${pushname}*

*üëæ Ôº≥Ôº°Ôº®Ôº°Ôº≥-Ôº≠Ôº§ üë®‚Äçüíªüíó*

> *ùó¢ùó™ùó°ùóòùó• ùóúùó°ùóôùó¢* 

*‚ö°·¥è·¥°…¥·¥á Ä …¥·¥Ä·¥ç·¥á -: Íú±·¥Ä ú·¥ÄÍú± …¥·¥á·¥õ úÍú±·¥Ä Ä·¥Ä (Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú)*
*‚ö°…¥·¥ú·¥ç ô·¥á Ä* -: 94718913389
*‚ö° è·¥è·¥ú·¥õ·¥ú ô·¥á -:* https://www.youtube.com/@Sahas_Tech
*‚ö°·¥° ú·¥Ä·¥õÍú±·¥Ä·¥ò·¥ò ·¥Ñ ú·¥Ä…¥…¥·¥á ü-:* https://whatsapp.com/channel/0029VaiTjMlK5cDLek3bB533

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `SHADOW-MD Owner Information`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://i.ibb.co/LP1dXT2/IMG-20241208-WA0281.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


cmd({
      pattern: "support",
      desc: "To get the bot informations.",
      category: "main",
      react: "‚õì",
      filename: __filename
    },
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try{
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üëã Hello ${pushname}*

*üë®‚ÄçüíªSHADOW-MD Support Channelsüíó*

*Youtube Channel Link:* https://www.youtube.com/@Sahas_Tech

*Whatsapp Channel Link:* https://whatsapp.com/channel/0029VaiTjMlK5cDLek3bB533

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `SHADOW-MD Support Channels`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://i.ibb.co/LP1dXT2/IMG-20241208-WA0281.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


cmd({
      pattern: "repo",
      desc: "To get the repo informations.",
      category: "main",
      react: "üì°",
      filename: __filename
    },
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try{
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `*üëã Hello ${pushname}*
          
üìçùñ±ùñæùóâùóà ùñ´ùóÇùóáùóÑ ‚ù§Ô∏è‚Äçüî•üëá

üë®‚Äçüíª‚ó¶ https://github.com/SahasTech22/SHADOW-MD

üìçùñØùóÖùñæùñ∫ùóåùñæ ùñ≤ùóéùñªùóåùñºùóãùóÇùñªùñæ ùñ¨ùóí ùñ∏ùóàùóéùóçùóéùñªùñæ ùñ¢ùóÅùñ∫ùóáùóáùñæùóÖ üëá

üë®‚Äçüíª‚ó¶ https://www.youtube.com/@Sahas_Tech

üìçùñØùóÖùñæùñ∫ùóåùñæ ùñ•ùóàùóÖùóÖùóàùóê ùñ¨ùóí ùñ∂ùóÅùñ∫ùóçùóåùñ∫ùóâùóâ ùñ¢ùóÅùñ∫ùóáùóáùñæùóÖ üëá

üë®‚Äçüíª‚ó¶ https://whatsapp.com/channel/0029VaiTjMlK5cDLek3bB533

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `SHADOW-MD Repo Informations`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://i.ibb.co/LP1dXT2/IMG-20241208-WA0281.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


cmd({
      pattern: "about",
      desc: "To get the bot informations.",
      category: "main",
      react: "‚ÑπÔ∏è",
      filename: __filename
    },
    
    async(conn, mek, m,{from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply}) => {
    try{
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent


          let desc = `üëã ùêáùêÑùêãùêãùêéùêñ ùêìùêáùêÑùêàùêë ${senderNumber}

ùêà ùêÄùêå ùêíùêÄùêáùêÄùêí-ùêåùêÉ ùêñùêáùêÄùêìùêíùêÄùêèùêè ùêÅùêéùêì

ùêÇùêëùêÑùêÄùêìùêÑùêÉ ùêÅùêò ùêíùêÄùêáùêÄùêí ùêìùêÑùêÇùêá (ùêíùêÄùêáùêÄùêí ùêçùêÑùêìùêáùêíùêÄùêëùêÄ)..
           
…¢…™·¥õ ú·¥ú ô :    
             
 è·¥è·¥ú·¥õ·¥ú ô·¥á : https://www.youtube.com/@Sahas_Tech
      
·¥° ú·¥Ä·¥õÍú±·¥Ä·¥ò·¥ò ·¥Ñ ú·¥Ä…¥…¥·¥á ü : https://whatsapp.com/channel/0029VaiTjMlK5cDLek3bB533

—Ç–ΩŒ±Œ∑–∫—ï ∆íœÉ—è œÖ—ïŒπŒ∑g  ÇŒ±‘ãŒ± Ç-–º‚àÇ œâ–ΩŒ±—Ç—ïŒ±œÅœÅ –≤œÉ—Ç –º‚àÇ`





          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `SHADOW-MD About`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://i.ibb.co/LP1dXT2/IMG-20241208-WA0281.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


cmd({
      pattern: "system",
      alias: ["status", "botinfo"],
      desc: "Check uptime, RAM usage, CPU info, and more",
      category: "main",
      react: "üß¨",
      filename: __filename
    }, async (conn, mek, m, { from, reply }) => {
      try {
          const senderNumber = m.sender;
          const isGroup = m.isGroup || false;

          // Check access permissions
          if (!checkAccess(senderNumber, isGroup)) {
              if (blacklistedJIDs.includes(senderNumber)) {
                  return reply("*üö´ You are blacklisted. Access denied.*");
              } else {
                  return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
              }
          }

          // System and memory information
          const uptime = runtime(process.uptime());
          const memoryUsage = (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2);
          const totalMemory = Math.round(os.totalmem() / 1024 / 1024);
          const cpuArch = os.arch();
          const cpuCores = os.cpus().length;
          const systemType = os.type();
          const freeMemory = (os.freemem() / 1024 / 1024).toFixed(2);

          // Custom message for Render platform
          let platformMessage = '';
          if (platformName === 'Render') {
              platformMessage = '\nüåü You are currently hosting on Render! Enjoy seamless deployments.';
          }

          // Status message to be sent
        
          
          let desc = `*‰πÇ SHADOW-MD SYSTEM INFORMATION*

*‚è∞ùñ±ùóéùóáùóçùóÇùóÜùñæ:-  ${runtime(process.uptime())}*    
*üìüùñ±ùñ∫ùóÜ ùñ¥ùóåùñ∫ùóÄùñæ:- ${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB / ${Math.round(require('os').totalmem / 1024 / 1024)}MB*
*‚öôÔ∏èùñØùóÖùñ∫ùóçùñøùóàùóãùóÜ:- ${os.hostname()}*
*üë®‚ÄçüíªùñÆùóêùóáùñæùóã:- ùñ≤ùñ∫ùóÅùñ∫ùóå ùñ≠ùñæùóçùóÅùóåùñ∫ùóãùñ∫*   
*üëæùñµùñæùóãùóåùóÇùóàùóá:- 1.0.0*
‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé ‚Äé
> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`

       

          

          // Sending the image with caption
          const sentMsg = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `SHADOW-MD System Information`,
              body: `Can't Find The Information. You Can Try Another Way. Error Code 4043`,
              thumbnailUrl: `https://i.ibb.co/LP1dXT2/IMG-20241208-WA0281.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
                  }
              }, { quoted: mek });

      } catch (e) {
          console.error(e);
          reply(`*Error:* ${e.message}`);
      }
    });


cmd({
    pattern: "speed",
    desc: "Check bot's response time.",
    category: "main",
    react: "ü™Ñ",
    filename: __filename
}, async (conn, mek, m, { from, quoted, reply }) => {
    try {
         const senderNumber = m.sender;
        const isGroup = m.isGroup || false;

        // Check access permissions
        if (!checkAccess(senderNumber, isGroup)) {
            if (blacklistedJIDs.includes(senderNumber)) {
                return reply("*üö´ You are blacklisted. Access denied.*");
            } else {
                return reply("*üò¢ Access denied. You don't have permission to use this command.üéÅ Change Bot Mode!*");
            }
        }
        const startTime = Date.now();
        const message = await conn.sendMessage(from, { text: '```Pinging To index.js!!!```' });
        const endTime = Date.now();
        const ping = endTime - startTime;

        // Send the ping response without buttons
        await conn.sendMessage(from, { text: `*üìç speed : ${ping}ms*` }, { quoted: message })
    } catch (e) {
        console.error(e);
        reply(`${e}`);
  }
});

//menu cmd

cmd({
    pattern: "menu",
    alias: ["list"],
    desc: "menu the bot",
    react: "üìú",
    category: "main"
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        let desc = `*üëãüèª ‡∑Ñ‡∑è‡∂∫‡∑í ${pushname}, I AM DARK SHADOW MD WA BOT ‚ôªÔ∏è*

*Command Panel üí±*

*‚è≥ RAM USAGE -*${(process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)}MB / ${(os.totalmem() / 1024 / 1024).toFixed(2)}MB
*‚è∞ UPTIME -* ${runtime(process.uptime())}
*üïπÔ∏è PREFIX -* ${config.PREFIX}

LIST OF MENU ‚ùáÔ∏è
*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*
*| ‚û§ 1 || OWNER MENU*
*| ‚û§ 2 || CONVERT MENU*
*| ‚û§ 3 || AI MENU*
*| ‚û§ 4 || DOWNLOAD MENU*
*| ‚û§ 5 || GROUP MENU*
*| ‚û§ 6 || ANIME MENU*
*| ‚û§ 7 || FUN MENU*
*| ‚û§ 8 || NEWS MENU*
*| ‚û§ 9 || OTHER MENU*
*‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ*

_üî¢ Reply The Number That You Want_

> ¬© ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥° - ·¥ç·¥Ö`;

                 // Sending the image with caption
          const vv = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 0,
          isForwarded: false,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå`,
              body: `ü§ñ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥° ·¥õ·¥á·¥Ä·¥ç ü§ñ`,
              thumbnailUrl: `https://i.ibb.co/YpCX2Nr/Whats-App-Image-2024-12-11-at-13-45-45-0427a8ff.jpg`,
              imageUrl: `https://i.ibb.co/YpCX2Nr/Whats-App-Image-2024-12-11-at-13-45-45-0427a8ff.jpg`,
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
              
                  }
              }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1':
                        reply(`
*ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø[ Owner Menu üßëüèª‚Äçüíª ]ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø*

| ‚û§ .restart
| ‚û§ .shutdown
| ‚û§ .broadcast
| ‚û§ .setpp
| ‚û§ .block
| ‚û§ .unblock
| ‚û§ .clearchats
| ‚û§ .jid
| ‚û§ .ss
*ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø*

> *¬© ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥° - ·¥ç·¥Ö*`);


 // Sending the image with caption
          const vv = await conn.sendMessage(from, {


          text: desc,
          contextInfo: {

          forwardingScore: 0,
          isForwarded: false,
          forwardedNewsletterMessageInfo: {
          newsletterName: 'Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå',
          newsletterJid: "120363296705464049@newsletter",
          },
          externalAdReply: {
              title: `Ôº≥Ôº®Ôº°Ôº§ÔºØÔº∑  |   Ôº≠Ôº§ üìå`,
              body: `ü§ñ·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥° ·¥õ·¥á·¥Ä·¥ç ü§ñ`,
              thumbnailUrl: `https://i.ibb.co/V9cRjgr/20241210-104055.jpg`,
      
              sourceUrl: ``,
              mediaType: 1,
              renderLargerThumbnail: true
              }
              
                  }
              }, { quoted: mek });
    
    
                        break;
                    case '2':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 üîÑ *ùêÇùê®ùêßùêØùêûùê´ùê≠ ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç  .convert
‚îù‚ùç .sticker2
‚îù‚ùç .tts
‚îù‚ùç .qmake
‚îù‚ùç .readmore
‚îù‚ùç .sticker
‚îù‚ùç .vv
‚îù‚ùç .circle
‚îù‚ùç .crop
‚îù‚ùç .round
‚îù‚ùç .toaudio
‚îù‚ùç .toanime
‚îù‚ùç .currency
‚îù‚ùç .url
‚îù‚ùç .img2url
‚îù‚ùç .trt
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);
                        break;
                    case '3':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 üëæ *ùêÄùê¢ ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç .ai
‚îù‚ùç .bing
‚îù‚ùç .copilot
‚îù‚ùç .blackbox
‚îù‚ùç .bingimgai
‚îù‚ùç .gemini
‚îù‚ùç .gpt4
‚îù‚ùç .laland
‚îù‚ùç .obfus
‚îù‚ùç .prodia
‚îù‚ùç .prodia2
‚îù‚ùç .texttoimg1
‚îù‚ùç .texttoimg2
‚îù‚ùç .texttoimg3
‚îù‚ùç .aemtv1
‚îù‚ùç .aemtv2
‚îù‚ùç .aemtv3
‚îù‚ùç .aemtv4
‚îù‚ùç .aemtv5
‚îù‚ùç .aemtv6
‚îù‚ùç .aemtv7
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);
                        break;
                    case '4':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 üîç *ùêíùêûùêöùê´ùêúùê° ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç .lyric 
‚îù‚ùç .yts
‚îù‚ùç .srepo
‚îù‚ùç .weather1
‚îù‚ùç .horo
‚îù‚ùç .google
‚îù‚ùç .couplepp
‚îù‚ùç .snumber
‚îù‚ùç .weather
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);
                        break;
                    case '5':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 üì• *ùêÉùê®ùê∞ùêßùê•ùê®ùêöùêù ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç .song2
‚îù‚ùç .video
‚îù‚ùç .fb
‚îù‚ùç .tt
‚îù‚ùç .gdrive
‚îù‚ùç .apkdl
‚îù‚ùç .twitter
‚îù‚ùç .apk
‚îù‚ùç .img
‚îù‚ùç .mfire
‚îù‚ùç .scloud
‚îù‚ùç .song
‚îù‚ùç .xnxx
‚îù‚ùç .xvideo
‚îù‚ùç .mega
‚îù‚ùç .gitclone
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);
                        break;
                    case '6':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 üîß *ùêåùêöùê¢ùêß ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç  .runtime
‚îù‚ùç .alive
‚îù‚ùç .allmenu
‚îù‚ùç .owner
‚îù‚ùç .support
‚îù‚ùç .repo
‚îù‚ùç .about
‚îù‚ùç .system
‚îù‚ùç .ping
‚îù‚ùç .allmenu
‚îù‚ùç .menu
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);
                        break;
                    case '7':               
                        reply(`*‚ôªÔ∏è DARK SHADOW - MD WA BOT ‚ôªÔ∏è*

*ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø[ Group Menu ]ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø*

| ‚û§ .mute
| ‚û§ .unmute
| ‚û§ .promote
| ‚û§ .demote
| ‚û§ .add
| ‚û§ .kick
| ‚û§ .setwelcome
| ‚û§ .setgoodbye
| ‚û§ .admins
| ‚û§ .groupdesc
| ‚û§ .groupinfo
| ‚û§ .grouplink
| ‚û§ .gname
| ‚û§ .setsubject
| ‚û§ .tagall
| ‚û§ .requests
| ‚û§ .accept
| ‚û§ .reject
| ‚û§ .hidetag
| ‚û§ .lock
| ‚û§ .unlock
| ‚û§ .approve
| ‚û§ .poll
| ‚û§ .getpic
*ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø*

> *¬© ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥° - ·¥ç·¥Ö*`);
                       break;
                    case '8':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 üéâ *ùêÖùêÆùêß ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç .animegirl
‚îù‚ùç .dog
‚îù‚ùç .fact
‚îù‚ùç .hack
‚îù‚ùç .insult
‚îù‚ùç .joke
‚îù‚ùç .quote
‚îù‚ùç .ronaldo
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);

                        break;
                    case '9':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 üé¨ *ùêåùê®ùêØùê¢ùêû ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç .uploadme
‚îù‚ùç .uploadmovie
‚îù‚ùç .moviekv
‚îù‚ùç .uploadtv
‚îù‚ùç .uploadtvm
‚îù‚ùç .uploadmoviem
‚îù‚ùç .uploadzip
‚îù‚ùç .uploadzipn
‚îù‚ùç .uploadzipfile
‚îù‚ùç .movie
‚îù‚ùç .gdmovie
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);

                    break;
                    case '10':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 ‚öôÔ∏è *ùêéùê≠ùê°ùêûùê´ ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç .anime1
‚îù‚ùç .anime2
‚îù‚ùç .anime3
‚îù‚ùç .anime4
‚îù‚ùç .anime5
‚îù‚ùç .loli
‚îù‚ùç .waifu
‚îù‚ùç .neko
‚îù‚ùç .megumin
‚îù‚ùç .maid
‚îù‚ùç .awoo
‚îù‚ùç .define
‚îù‚ùç .githubstalk
‚îù‚ùç .gpass
‚îù‚ùç .wiki
‚îù‚ùç .ss
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);

                    break;
                    case '11':               
                        reply(`*‚ôªÔ∏è DARK SHADOW - MD WA BOT ‚ôªÔ∏è*

*ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø[ News Menu ]ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø*

| ‚û§ .hirunews
| ‚û§ .derananews
| ‚û§ .lankadeepa
| ‚û§ .siyathanews
| ‚û§ .itnnews
| ‚û§ .sirasanews
| ‚û§ .nethnews
*ÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºøÔºø*

> *¬© ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ö·¥Ä Ä·¥ã Íú± ú·¥Ä·¥Ö·¥è·¥° - ·¥ç·¥Ö*`);

                    break;
                    case '12':               
                        reply(`‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£
 üõ†Ô∏è *ùêìùê®ùê®ùê•ùê¨ ùêåùêûùêßùêÆ*
‚îù‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚ùç‚ùç‚ùç
‚îù‚ùç .bass
‚îù‚ùç .blown
‚îù‚ùç .deep
‚îù‚ùç .fast
‚îù‚ùç .reverse2
‚îù‚ùç .calc
‚îù‚ùç .translate
‚îù‚ùç .reverse
‚îù‚ùç .tempmail
‚îù‚ùç .checkmail
‚îù‚ùç .delmail
‚îù‚ùç .encode
‚îù‚ùç .decode
‚îù‚ùç .npmstalk
‚îù‚ùç .iplookup
‚îù‚ùç .instastalk
‚îù‚ùç .githubuser
‚îù‚ùç .password
‚îù‚ùç .hijact
‚îù‚ùç .antispam
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ùç‚ùç‚û£

> *¬©·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú±·¥Ä ú·¥ÄÍú± ·¥õ·¥á·¥Ñ ú*`);

                    
                        break;
                    default:
                        reply("Invalid option. Please select a valid optionüî¥");
                }

            }
        });

    } catch (e) {
        console.error(e);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } })
        reply('An error occurred while processing your request.');
    }
});
